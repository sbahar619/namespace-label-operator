name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:  # Allow manual triggering

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'latest'

jobs:
  # Fast validation for immediate feedback
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      go-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # We'll handle caching manually for better control

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'Makefile') }}" >> $GITHUB_OUTPUT

    - name: Cache Go modules and tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ./bin/
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Quick build check
      run: go build -v ./...

    - name: Verify go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not formatted. Run 'make fmt'"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"

    - name: Run go vet
      run: go vet ./...

  # Parallel jobs that run after quick validation passes
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ./bin/
        key: ${{ needs.quick-validation.outputs.go-cache-key }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ./bin/
        key: ${{ needs.quick-validation.outputs.go-cache-key }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install test dependencies
      run: make envtest ginkgo

    - name: Run unit tests with coverage
      run: |
        make test
        go tool cover -html=cover.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./cover.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 30

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=cover.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        if (( $(echo "${COVERAGE} < 80" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below threshold of 80%"
          exit 1
        fi
        echo "✅ Coverage ${COVERAGE}% meets threshold"

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    strategy:
      matrix:
        target: [controller, webhook]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ./bin/
        key: ${{ needs.quick-validation.outputs.go-cache-key }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      run: make build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./cmd/${{ matrix.target }}/Dockerfile
        tags: ${{ matrix.target }}:latest
        load: true
        cache-from: type=gha,scope=${{ matrix.target }}
        cache-to: type=gha,mode=max,scope=${{ matrix.target }}
        platforms: linux/amd64

  # E2E tests run only after build validation passes
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [quick-validation, build-validation]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: namespacelabel-e2e
        kubectl_version: v1.28.0

    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ./bin/
        key: ${{ needs.quick-validation.outputs.go-cache-key }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install test dependencies
      run: make ginkgo

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build controller image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./cmd/controller/Dockerfile
        tags: controller:latest
        load: true
        cache-from: type=gha,scope=controller
        platforms: linux/amd64

    - name: Build webhook image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./cmd/webhook/Dockerfile
        tags: webhook:latest
        load: true
        cache-from: type=gha,scope=webhook
        platforms: linux/amd64

    - name: Load images to kind
      run: |
        kind load docker-image controller:latest --name namespacelabel-e2e
        kind load docker-image webhook:latest --name namespacelabel-e2e

    - name: Deploy to cluster
      run: |
        # Deploy controller and webhook with correct image references
        make deploy CONTROLLER_IMG=controller:latest WEBHOOK_IMG=webhook:latest

        # Patch deployments for local images
        kubectl patch deployment namespacelabel-controller-manager -n namespacelabel-system --type=json --patch '[
          {
            "op": "replace",
            "path": "/spec/template/spec/containers/0/imagePullPolicy",
            "value": "IfNotPresent"
          }
        ]'

        kubectl patch deployment namespacelabel-webhook-server -n namespacelabel-system --type=json --patch '[
          {
            "op": "replace",
            "path": "/spec/template/spec/containers/0/imagePullPolicy",
            "value": "IfNotPresent"
          }
        ]'
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=Available deployment/namespacelabel-controller-manager -n namespacelabel-system --timeout=300s
        kubectl wait --for=condition=Available deployment/namespacelabel-webhook-server -n namespacelabel-system --timeout=300s

    - name: Run E2E tests
      run: make test-e2e
      timeout-minutes: 20

    - name: Get pod logs on failure
      if: failure()
      run: |
        echo "=== Controller logs ==="
        kubectl logs deployment/namespacelabel-controller-manager -n namespacelabel-system --tail=100 || true
        echo "=== Webhook logs ==="
        kubectl logs deployment/namespacelabel-webhook-server -n namespacelabel-system --tail=100 || true
        echo "=== Pod status ==="
        kubectl get pods -n namespacelabel-system -o wide || true
        kubectl describe pods -n namespacelabel-system || true

    - name: Cleanup kind cluster
      if: always()
      run: kind delete cluster --name namespacelabel-e2e

  # Summary job that depends on all others
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: 
      - quick-validation
      - code-quality
      - unit-tests
      - build-validation
      - e2e-tests
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        echo "Job Results:"
        echo "- Quick Validation: ${{ needs.quick-validation.result }}"
        echo "- Code Quality: ${{ needs.code-quality.result }}"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- Build Validation: ${{ needs.build-validation.result }}"
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
        
        # Check if any required jobs failed
        if [ "${{ needs.quick-validation.result }}" != "success" ] || \
           [ "${{ needs.code-quality.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.build-validation.result }}" != "success" ]; then
          echo "❌ One or more required jobs failed"
          exit 1
        fi
        
        # E2E tests are conditional, so check if they ran and failed
        if [ "${{ needs.e2e-tests.result }}" == "failure" ]; then
          echo "❌ E2E tests failed"
          exit 1
        fi
        
        echo "✅ All jobs completed successfully!"
